Imports System.ComponentModel
Imports System.Data.Sql
Imports System.Data.SqlClient
Public Class Compras
    Sub TxtColorBlack()
        Txt_Producto.ForeColor = Color.Black
        Txt_Precio.ForeColor = Color.Black
        ND_Cantidad.ForeColor = Color.Black
        Txt_IdProveedor.ForeColor = Color.Black
    End Sub

    Sub limpiarCampos()
        Txt_Producto.Text = "Nombre del Producto"
        Txt_Producto.ForeColor = Color.Gray
        Txt_Precio.Text = "Precio"
        Txt_Precio.ForeColor = Color.Gray
        ND_Cantidad.Value = 0
        ND_Cantidad.ForeColor = Color.Gray
        Txt_IdProveedor.Text = "Id del Proveedor"
        Txt_IdProveedor.ForeColor = Color.Gray
    End Sub

    Sub ValidarOnHigh()
        Validación.SetHighlightColor(Txt_Producto, DevComponents.DotNetBar.Validator.eHighlightColor.Red)
        Validación.SetHighlightColor(Txt_Precio, DevComponents.DotNetBar.Validator.eHighlightColor.Red)
        Validación.SetHighlightColor(ND_Cantidad, DevComponents.DotNetBar.Validator.eHighlightColor.Red)
        Validación.SetHighlightColor(Txt_IdProveedor, DevComponents.DotNetBar.Validator.eHighlightColor.Red)
    End Sub

    Sub validaroffhigh()
        Validación.SetHighlightColor(Txt_Producto, DevComponents.DotNetBar.Validator.eHighlightColor.None)
        Validación.SetHighlightColor(Txt_Precio, DevComponents.DotNetBar.Validator.eHighlightColor.None)
        Validación.SetHighlightColor(ND_Cantidad, DevComponents.DotNetBar.Validator.eHighlightColor.None)
        Validación.SetHighlightColor(Txt_IdProveedor, DevComponents.DotNetBar.Validator.eHighlightColor.None)
    End Sub


    Sub MostrarLabelsCamposVacios()
        Lbl_MsjNombre.Visible = True
        Lbl_MsjPrecio.Visible = True
        Lbl_MsjCantidad.Visible = True
        Lbl_MsjIdProveedor.Visible = True
    End Sub

    Sub OcultarLabels()
        Lbl_MsjNombre.Visible = False
        Lbl_MsjPrecio.Visible = False
        Lbl_MsjCantidad.Visible = False
        Lbl_MsjIdProveedor.Visible = False
    End Sub



    Private Sub Productos_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        'TODO: esta línea de código carga datos en la tabla 'Agrocomercial_AVADataSet.Ventas' Puede moverla o quitarla según sea necesario.
        Me.VentasTableAdapter.Fill(Me.Agrocomercial_AVADataSet.Ventas)
        'TODO: esta línea de código carga datos en la tabla 'Agrocomercial_AVADataSet.Ventas' Puede moverla o quitarla según sea necesario.
        Me.VentasTableAdapter.Fill(Me.Agrocomercial_AVADataSet.Ventas)

        'TODO:   esta línea de código carga datos en la tabla 'Agrocomercial_AVADataSet.Proveedores' Puede moverla o quitarla según sea necesario.
        Me.ProveedoresTableAdapter.Fill(Me.Agrocomercial_AVADataSet.Proveedores)
        'TODO: esta línea de código carga datos en la tabla 'Agrocomercial_AVADataSet.Compras' Puede moverla o quitarla según sea necesario.
        Me.ComprasTableAdapter.Fill(Me.Agrocomercial_AVADataSet.Compras)
        limpiarCampos()
    End Sub

    Private Sub Btn_Actualizar_Click(sender As Object, e As EventArgs) Handles Btn_Actualizar.Click

        Dim S As String 'Variable para inputbox
        Dim Num As Integer 'Variable Interger para asignar cuando convirtamos S
        'Validacion para tener un limite en los digitos ingresaos en el input box para que no genere un desbordamiento en el mismo
        If S.Length > 9 Then
            MsgBox("MAXIMO NUMERO DE DIGITOS ALCANZADO")
            Exit Sub
        End If


        If (Txt_Producto.Text = "Nombre del Producto") Or (Txt_Precio.Text = "Precio") Or (ND_Cantidad.Value = 0) Or (Txt_IdProveedor.Text = "Id Proveedor") Then
            MsgBox("No se puede agregar la compra, revise bien los campos")
            ValidarOnHigh()
            MostrarLabelsCamposVacios()
            Lbl_MsjNombre.Text = "Campo vacio"
            Lbl_MsjPrecio.Text = "Campo vacio"
            Lbl_MsjCantidad.Text = "Campo vacio"
            Lbl_MsjIdProveedor.Text = "Campo vacio"
        Else
            S = InputBox("Ingrese el numero de la compra", "Compras", 0)

            'Sentencia para que nos permita salir del imputbox
            If S = "" Then
                Exit Sub
            End If

            If IsNumeric(S) Then 'Validando que el inputbox solo acepte letras

                Num = CDbl(S) 'Convertimos S a double y se lo asignamos a la variable Num
                Dim conexion As String = "Data Source=DESKTOP-18G5VAI\SQLEXPRESS ;Initial Catalog=Agrocomercial AVA ;Integrated Security=True" 'Conectandono con la base de datos
                Dim comando As String = "select * from Inventario Where Numero_Compra=" & S 'Comparando el número de compra de la tabla inventario con el dato ingresado al inputbox
                Dim DAI
                Dim DTI As New DataTable

                Dim comand As String = "select * from Compras Where Numero_Compra= " & S 'Comparando el número de compra de la tabla compras con el dato ingresado al inputbox
                Dim da
                Dim dt As New DataTable

                If Num > 0 Then 'Validación que no acepte numeros negativos nuestro inputbox

                    'El try catch nos permite facilitar encontrar errores en nuestro codigo
                    Try
                        DAI = New SqlDataAdapter(comando, conexion)
                        DAI.Fill(DTI)
                        da = New SqlDataAdapter(comand, conexion)
                        da.Fill(dt)

                        'Comprobamos si el numero de compra ya está registrado en el inventario nos de un error y no nos permita borrar la compra
                        If DTI.Rows.Count <> 0 Then
                            MsgBox("Esta compra no se puede actualizar porque ya se encuentra en el inventario.")
                        ElseIf dt.Rows.Count <> 0 And Not DTI.Rows.Count <> 0 Then 'En dado caso que exista en compras y no existe en inventario nos permitirá borrar la compra
                            Me.ComprasTableAdapter.Actualizar_Compra(Txt_Producto.Text, Txt_Precio.Text, ND_Cantidad.Value, Txt_IdProveedor.Text, Num)
                            Me.ComprasTableAdapter.Fill(Me.Agrocomercial_AVADataSet.Compras)
                            MsgBox("se actualizo toda la informacion de la ", vbInformation, "Correcto")
                            limpiarCampos()
                            validaroffhigh()
                            OcultarLabels()
                        Else
                            MsgBox("El número de compra no existe") 'Y si el número de compra no existe ni en inventario, ni en la tabla compras nos muestra un mensaje que no existe dicho número
                        End If
                    Catch ex As Exception
                        MsgBox(ex.ToString)
                    End Try

                Else
                    MsgBox("No se aceptan números negativos")
                End If

            Else
                MsgBox("No se acepta este tipo de caracter")
            End If

        End If
    End Sub

    Private Sub Btn_Buscar_Click(sender As Object, e As EventArgs) Handles Btn_Buscar.Click
        Dim S As String 'Variable para inputbox
        Dim Num As Integer 'Variable Interger para asignar cuando convirtamos S
        S = InputBox("Ingrese el numero de la compra", "Compras", 0)
        'Validacion para tener un limite en los digitos ingresaos en el input box para que no genere un desbordamiento en el mismo
        If S.Length > 9 Then
            MsgBox("MAXIMO NUMERO DE DIGITOS ALCANZADO")
            Exit Sub
        End If

        'Sentencia para que nos permita salir del imputbox
        If S = "" Then
            Exit Sub
        End If

        If IsNumeric(S) Then 'Validando que el inputbox solo acepte letras

            Num = CDbl(S) 'Convertimos S a double y se lo asignamos a la variable Num
            Dim conexion As String = "Data Source=DESKTOP-18G5VAI\SQLEXPRESS ;Initial Catalog=Agrocomercial AVA ;Integrated Security=True" 'Conectandono con la base de datos
            Dim comando As String = "select * from Inventario Where Numero_Compra=" & S 'Comparando el número de compra de la tabla inventario con el dato ingresado al inputbox
            Dim DAI
            Dim DTI As New DataTable

            Dim comand As String = "select * from Compras Where Numero_Compra= " & S 'Comparando el número de compra de la tabla compras con el dato ingresado al inputbox
            Dim da
            Dim dt As New DataTable

            If Num > 0 Then 'Validación que no acepte numeros negativos nuestro inputbox

                'El try catch nos permite facilitar encontrar errores en nuestro codigo
                Try
                    DAI = New SqlDataAdapter(comando, conexion)
                    DAI.Fill(DTI)
                    da = New SqlDataAdapter(comand, conexion)
                    da.Fill(dt)

                    'Comprobamos si el numero de compra ya está registrado en el inventario nos de un error y no nos permita borrar la compra
                    If DTI.Rows.Count <> 0 Then

                        Me.ComprasTableAdapter.Buscar_Compra(Me.Agrocomercial_AVADataSet.Compras, Num)
                    Else
                        MsgBox("El número de compra no existe") 'Y si el número de compra no existe ni en inventario, ni en la tabla compras nos muestra un mensaje que no existe dicho número
                    End If
                Catch ex As Exception
                    MsgBox(ex.ToString)
                End Try

            Else
                MsgBox("No se aceptan números negativos")
            End If

        Else
            MsgBox("No se acepta este tipo de caracter")
        End If
    End Sub


    'Boton Borrar
    Private Sub Btn_Borrar_Click(sender As Object, e As EventArgs) Handles Btn_Borrar.Click
        Dim S As String 'Variable para inputbox
        Dim Num As Integer 'Variable Interger para asignar cuando convirtamos S
        S = InputBox("Ingrese el numero de la compra", "Compras", 0)
        'Validacion para tener un limite en los digitos ingresaos en el input box para que no genere un desbordamiento en el mismo
        If S.Length > 9 Then
            MsgBox("MAXIMO NUMERO DE DIGITOS ALCANZADO")
            Exit Sub
        End If

        'Sentencia para que nos permita salir del imputbox
        If S = "" Then
            Exit Sub
        End If

        If IsNumeric(S) Then 'Validando que el inputbox solo acepte letras

            Num = CDbl(S) 'Convertimos S a double y se lo asignamos a la variable Num
            Dim conexion As String = "Data Source=DESKTOP-18G5VAI\SQLEXPRESS  ;Initial Catalog=Agrocomercial AVA ;Integrated Security=True" 'Conectandono con la base de datos
            Dim comando As String = "select * from Inventario Where Numero_Compra=" & S 'Comparando el número de compra de la tabla inventario con el dato ingresado al inputbox
            Dim DAI
            Dim DTI As New DataTable

            Dim comand As String = "select * from Compras Where Numero_Compra= " & S 'Comparando el número de compra de la tabla compras con el dato ingresado al inputbox
            Dim da
            Dim dt As New DataTable

            If Num > 0 Then 'Validación que no acepte numeros negativos nuestro inputbox

                'El try catch nos permite facilitar encontrar errores en nuestro codigo
                Try
                    DAI = New SqlDataAdapter(comando, conexion)
                    DAI.Fill(DTI)
                    da = New SqlDataAdapter(comand, conexion)
                    da.Fill(dt)

                    'Comprobamos si el numero de compra ya está registrado en el inventario nos de un error y no nos permita borrar la compra
                    If DTI.Rows.Count <> 0 Then
                        MsgBox("Esta compra no se puede eliminar porque ya se encuentra en el inventario.")
                    ElseIf dt.Rows.Count <> 0 And Not DTI.Rows.Count <> 0 Then 'En dado caso que exista en compras y no existe en inventario nos permitirá borrar la compra
                        Me.ComprasTableAdapter.Borrar_Compra(Num)
                        Me.ComprasTableAdapter.Fill(Me.Agrocomercial_AVADataSet.Compras)
                        MsgBox("La compra se ha borrado con exito")
                    Else
                        MsgBox("El número de compra no existe") 'Y si el número de compra no existe ni en inventario, ni en la tabla compras nos muestra un mensaje que no existe dicho número
                    End If
                Catch ex As Exception
                    MsgBox(ex.ToString)
                End Try

            Else
                MsgBox("No se aceptan números negativos")
            End If

        Else
            MsgBox("No se acepta este tipo de caracter")
        End If
    End Sub



    Private Sub Compras_Shown(sender As Object, e As EventArgs) Handles MyBase.Shown
        limpiarCampos()
    End Sub


    Private Sub Txt_Precio_KeyPress(sender As Object, e As KeyPressEventArgs) Handles Txt_Precio.KeyPress
        NumerosyDecimal(Txt_Precio, e)
    End Sub

    Private Sub ND_Cantidad_KeyPress(sender As Object, e As KeyPressEventArgs) Handles ND_Cantidad.KeyPress
        SoloNumeros(e)
    End Sub


    Private Sub Button2_Click(sender As Object, e As EventArgs) Handles Btn_Mostrar.Click
        Me.ComprasTableAdapter.Fill(Me.Agrocomercial_AVADataSet.Compras)

    End Sub

    Private Sub ComprasDataGridView_Click(sender As Object, e As EventArgs) Handles ComprasDataGridView.Click
        'Agregar datos del datagridview a los textbox
        Txt_Producto.Text = ComprasDataGridView.CurrentRow.Cells.Item(1).Value.ToString
        Txt_Precio.Text = ComprasDataGridView.CurrentRow.Cells.Item(2).Value.ToString
        ND_Cantidad.Value = ComprasDataGridView.CurrentRow.Cells.Item(3).Value.ToString
        Txt_IdProveedor.Text = ComprasDataGridView.CurrentRow.Cells.Item(4).Value.ToString
        Dtp_Fecha.Value = ComprasDataGridView.CurrentRow.Cells.Item(5).Value.ToString
        Dt_Hora.Value = Convert.ToDateTime(ComprasDataGridView.CurrentRow.Cells.Item(6).Value.ToString)
        TxtColorBlack()
    End Sub

    Private Sub Txt_Producto_Leave(sender As Object, e As EventArgs) Handles Txt_Producto.Leave


        If Txt_Producto.Text = "Nombre del Producto" Then
            Validación.SetHighlightColor(Txt_Producto, DevComponents.DotNetBar.Validator.eHighlightColor.Red)
            Lbl_MsjNombre.Text = "        Campo Vacio"
            Lbl_MsjNombre.Visible = True

        Else
            Validación.SetHighlightColor(Txt_Producto, DevComponents.DotNetBar.Validator.eHighlightColor.None)
            Lbl_MsjNombre.Visible = False

            Espacios(Txt_Producto)
        End If
    End Sub

    Private Sub Btn_Limpiar_Click(sender As Object, e As EventArgs) Handles Btn_Limpiar.Click
        limpiarCampos()
    End Sub

    'ESTILO DEL PLACEHOLDER DE Nombre del Producto
    Private Sub Txt_Producto_TextChanged(sender As Object, e As EventArgs) Handles Txt_Producto.TextChanged
        With Txt_Producto
            If .Text = "" Then
                .Text = "Nombre del Producto"
                .ForeColor = Color.Gray
            End If

            If .TextLength > 19 Then
                If StrReverse(StrReverse(.Text).Remove(19)) = "Nombre del Producto" Then
                    .Text = .Text.Remove(.TextLength - 19)
                    .ForeColor = Color.Black
                    .SelectionStart = .TextLength
                    .ScrollToCaret()
                End If
            End If
        End With
    End Sub
    Private Sub Txt_Producto_MouseDown(sender As Object, e As MouseEventArgs) Handles Txt_Producto.MouseDown
        With Txt_Producto
            If .Text = "Nombre del Producto" And .ForeColor = Color.Gray Then
                .SelectionStart = .TextLength
                .SelectionLength = 0
                .SelectionStart = 0
                .ScrollToCaret()
            End If
        End With
    End Sub
    Private Sub Txt_Producto_MouseMove(sender As Object, e As MouseEventArgs) Handles Txt_Producto.MouseMove
        With Txt_Producto
            If .Text = "Nombre del Producto" And .ForeColor = Color.Gray Then
                Txt_Producto.Select(0, 0)
            End If
        End With
    End Sub


    Private Sub Txt_Precio_TextChanged(sender As Object, e As EventArgs) Handles Txt_Precio.TextChanged
        With Txt_Precio
            If .Text = "" Then
                .Text = "Precio"
                .ForeColor = Color.Gray
            End If

            If .TextLength > 6 Then
                If StrReverse(StrReverse(.Text).Remove(6)) = "Precio" Then
                    .Text = .Text.Remove(.TextLength - 6)
                    .ForeColor = Color.Black
                    .SelectionStart = .TextLength
                    .ScrollToCaret()
                End If
            End If
        End With
    End Sub
    Private Sub Txt_Precio_MouseDown(sender As Object, e As MouseEventArgs) Handles Txt_Precio.MouseDown
        With Txt_Precio
            If .Text = "Precio" And .ForeColor = Color.Gray Then
                .SelectionStart = .TextLength
                .SelectionLength = 0
                .SelectionStart = 0
                .ScrollToCaret()
            End If
        End With

    End Sub

    Private Sub Txt_Precio_MouseMove(sender As Object, e As MouseEventArgs) Handles Txt_Precio.MouseMove
        With Txt_Precio
            If .Text = "Precio" And .ForeColor = Color.Gray Then
                .Select(0, 0)
            End If
        End With
    End Sub

    Private Sub Txt_IdProveedor_KeyPress(sender As Object, e As KeyPressEventArgs) Handles Txt_IdProveedor.KeyPress
        InhCombobox(e)
    End Sub

    Private Sub Btn_Agregar_Click(sender As Object, e As EventArgs) Handles Btn_Agregar.Click
        If (Txt_Producto.Text = "Nombre del Producto") And (Txt_Precio.Text = "Precio") And (ND_Cantidad.Value = 0) And (Txt_IdProveedor.Text = "Id del Proveedor") Then
            MsgBox("No se puede agregar la compra, revise bien los campos")
            ValidarOnHigh()
            MostrarLabelsCamposVacios()
            Lbl_MsjNombre.Text = "Campo vacio"
            Lbl_MsjPrecio.Text = "Campo vacio"
            Lbl_MsjCantidad.Text = "Campo vacio"
            Lbl_MsjIdProveedor.Text = "Campo vacio"

        ElseIf (Txt_Producto.Text = "Nombre del Producto") Or (Txt_Precio.Text = "Precio") Or (ND_Cantidad.Value = 0) Or (Txt_IdProveedor.Text = "Id del Proveedor") Then
            MsgBox("No se puede agregar la compra, revise bien los campos")
            validaroffhigh()
            OcultarLabels()
            limpiarCampos()
        Else
            MsgBox("Se ha Agregado la compra", vbInformation, "Correcto")
            Me.ComprasTableAdapter.Insertar_Compra(Txt_Producto.Text, Txt_Precio.Text, ND_Cantidad.Value, Txt_IdProveedor.Text, Dtp_Fecha.Value, Dt_Hora.Value.ToShortTimeString)
            Me.ComprasTableAdapter.Fill(Me.Agrocomercial_AVADataSet.Compras)

            validaroffhigh()
            OcultarLabels()
            limpiarCampos()
        End If
    End Sub

    Private Sub Txt_Precio_Leave(sender As Object, e As EventArgs) Handles Txt_Precio.Leave
        If Txt_Precio.Text = "Precio" Then
            Validación.SetHighlightColor(Txt_Precio, DevComponents.DotNetBar.Validator.eHighlightColor.Red)
            Lbl_MsjPrecio.Text = "        Campo Vacio"
            Lbl_MsjPrecio.Visible = True
        Else
            Validación.SetHighlightColor(Txt_Precio, DevComponents.DotNetBar.Validator.eHighlightColor.None)
            Lbl_MsjPrecio.Visible = False
        End If
    End Sub

    Private Sub Txt_IdProveedor_Leave(sender As Object, e As EventArgs) Handles Txt_IdProveedor.Leave
        If Txt_IdProveedor.Text = "Id del Proveedor" Then
            Validación.SetHighlightColor(Txt_IdProveedor, DevComponents.DotNetBar.Validator.eHighlightColor.Red)
            Lbl_MsjIdProveedor.Text = "        Campo Vacio"
            Lbl_MsjIdProveedor.Visible = True
        Else
            Validación.SetHighlightColor(Txt_Precio, DevComponents.DotNetBar.Validator.eHighlightColor.None)
            Lbl_MsjIdProveedor.Visible = False
        End If
    End Sub

    Private Sub ND_Cantidad_Leave(sender As Object, e As EventArgs) Handles ND_Cantidad.Leave
        If ND_Cantidad.Value = 0 Then
            Validación.SetHighlightColor(ND_Cantidad, DevComponents.DotNetBar.Validator.eHighlightColor.Red)
            Lbl_MsjCantidad.Text = "        Campo Vacio"
            Lbl_MsjCantidad.Visible = True
        Else
            Lbl_MsjCantidad.Visible = True
            Validación.SetHighlightColor(ND_Cantidad, DevComponents.DotNetBar.Validator.eHighlightColor.None)
        End If
    End Sub
End Class
